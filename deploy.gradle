/*
 * Copyright (c) Joaquim Ley 2016. All Rights Reserved.
 * <p/>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p/>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p/>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Gradle script for uploading your own library to jcenter()
 * 
 * Make a copy of the deploy.properties template:
 * https://github.com/JoaquimLey/jcenter-config/deploy.properties
 * 
 * Run with: ./gradlew :moduleName bintrayUpload
 * 
 * More info: https://github.com/JoaquimLey/jcenter-config
 */

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group = properties.getProperty('group')
version = properties.getProperty('version')

bintray {
    user = properties.getProperty('bintray.user')
    key = properties.getProperty('bintray.apikey')
    //dryRun = properties.getProperty('bintray.dryRun')
    publish = properties.getProperty('bintray.publish')
    configurations = ['archives'] //When uploading configuration files
    pkg {
        repo = properties.getProperty('repo')
        name = properties.getProperty('name')
        userOrg = properties.getProperty('userOrg')
        desc = properties.getProperty('description')
        websiteUrl = properties.getProperty('websiteUrl')
        issueTrackerUrl = properties.getProperty('issueTrackerUrl')
        vcsUrl = properties.getProperty('vcsUrl')
        licenses = [properties.getProperty('license')]
        labels = properties.getProperty('labels')
        publicDownloadNumbers = properties.getProperty('publicDownloadNumbers')
        version {
            name = properties.getProperty('versionName')
            released = new Date()
            desc = properties.getProperty('versionDescription')
            vcsTag = properties.getProperty('vcsTag')
            gpg {
                //Determines whether to GPG sign the files. The default is false
                sign = properties.getProperty('gpgSign')
                passphrase = properties.getProperty("gpgPassphrase")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging properties.getProperty('pomPackaging')
                name properties.getProperty('pomName')
                description properties.getProperty('pomName')
                artifactId properties.getProperty('pomArtifactId')
                url properties.getProperty('websiteUrl')
                licenses {
                    license {
                        name properties.getProperty('pomLicenseName')
                        url properties.getProperty('pomLicenseUrl')
                    }
                }
                developers {
                    developer {
                        id properties.getProperty('pomDeveloperId')
                        name properties.getProperty('pomDeveloperName')
                        email properties.getProperty('pomDeveloperEmail')
                    }
                }
                scm {
                    connection properties.getProperty('vcsUrl')
                    developerConnection properties.getProperty('vcsUrl')
                    url properties.getProperty('websiteUrl')

                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
